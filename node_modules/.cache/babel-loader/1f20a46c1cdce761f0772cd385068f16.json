{"ast":null,"code":"var _jsxFileName = \"/Users/plasmalazer/PycharmProjects/React/src/Components/Testing/Testing.jsx\";\nimport \"./Testing.css\";\nimport { CheckCircle, DoNotDisturb } from \"@mui/icons-material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Testing() {\n  const initialValues = {\n    Application_Title: ''\n  };\n  const SoftwareSDK = [{\n    name: 'Ubuntu Bionic',\n    TestStatus: 1\n  }, {\n    name: 'ZCU102 Smartsat Linux',\n    TestStatus: 0\n  }, {\n    name: 'ZCU102 VXWorks',\n    TestStatus: 0\n  }, {\n    name: 'ZCU102 Smartsat Linux',\n    TestStatus: 0\n  }, {\n    name: 'ZCU102 Smartsat Linux',\n    TestStatus: 0\n  }];\n  const HardwareSDK = [{\n    name: 'ZCU',\n    TestStatus: 1\n  }, {\n    name: 'The Other One',\n    TestStatus: 0\n  }];\n\n  const Softwares = () => {\n    const myMap = [];\n\n    for (const object in SoftwareSDK) {\n      //console.log(SoftwareSDK[object])\n      for (const value in SoftwareSDK[object]) {\n        console.log(SoftwareSDK[object][value]);\n\n        if (value === 'name') {\n          var SoftwareName = SoftwareSDK[object][value];\n        } else {\n          var Status = SoftwareSDK[object][value];\n        }\n      }\n\n      if (Status === 0) {\n        myMap.push( /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"soft\",\n            children: [SoftwareName, /*#__PURE__*/_jsxDEV(DoNotDisturb, {\n              className: \"StatusIcon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 21\n          }, this)\n        }, SoftwareName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 24\n        }, this));\n      } else {\n        myMap.push( /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"soft\",\n            children: [SoftwareName, /*#__PURE__*/_jsxDEV(CheckCircle, {\n              className: \"StatusIcon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }, this)\n        }, SoftwareName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 24\n        }, this));\n      }\n    }\n\n    return myMap;\n  };\n\n  const Hard = () => {\n    const myMap = [];\n\n    for (const object in HardwareSDK) {\n      //console.log(SoftwareSDK[object])\n      for (const value in HardwareSDK[object]) {\n        if (value === 'name') {\n          var HardwareName = HardwareSDK[object][value];\n        } else {\n          var Status = HardwareSDK[object][value];\n        }\n      }\n\n      if (Status === 0) {\n        myMap.push( /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"soft\",\n            children: [HardwareName, /*#__PURE__*/_jsxDEV(DoNotDisturb, {\n              className: \"StatusIcon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 21\n          }, this)\n        }, HardwareName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 24\n        }, this));\n      } else {\n        myMap.push( /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"soft\",\n            children: [HardwareName, /*#__PURE__*/_jsxDEV(CheckCircle, {\n              className: \"StatusIcon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }, this)\n        }, HardwareName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 24\n        }, this));\n      }\n    }\n\n    console.log(myMap);\n    return myMap;\n  };\n\n  const SoftwareList = () => /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"SoftwareListCSS\",\n    children: /*#__PURE__*/_jsxDEV(Softwares, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n\n  const HardwareList = () => /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"SoftwareListCSS\",\n    children: /*#__PURE__*/_jsxDEV(Hard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"testing\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"Application\",\n        children: \"Project Figure what to put on the bottom of my hayride jug\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TestResults\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Software\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"soft\",\n            children: \"Software\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(SoftwareList, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Hardware\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"soft\",\n            children: \"Hardware\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(HardwareList, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_c = Testing;\n\nvar _c;\n\n$RefreshReg$(_c, \"Testing\");","map":{"version":3,"sources":["/Users/plasmalazer/PycharmProjects/React/src/Components/Testing/Testing.jsx"],"names":["CheckCircle","DoNotDisturb","Testing","initialValues","Application_Title","SoftwareSDK","name","TestStatus","HardwareSDK","Softwares","myMap","object","value","console","log","SoftwareName","Status","push","Hard","HardwareName","SoftwareList","HardwareList"],"mappings":"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","sourcesContent":["import \"./Testing.css\";\nimport {\n  CheckCircle,\n  DoNotDisturb\n} from \"@mui/icons-material\";\nexport default function Testing() {\nconst initialValues = {\n\tApplication_Title: ''\n}\nconst SoftwareSDK = [\n    {\n        name: 'Ubuntu Bionic',\n        TestStatus: 1 ,\n    },\n    {\n        name: 'ZCU102 Smartsat Linux',\n        TestStatus: 0,\n    },\n    {\n        name: 'ZCU102 VXWorks',\n        TestStatus: 0,\n    },\n    {\n        name: 'ZCU102 Smartsat Linux',\n        TestStatus: 0,\n    },\n    {\n        name: 'ZCU102 Smartsat Linux',\n        TestStatus: 0,\n    },\n];\nconst HardwareSDK = [\n    {\n        name: 'ZCU',\n        TestStatus: 1 ,\n    },\n    {\n        name: 'The Other One',\n        TestStatus: 0,\n    },\n];\nconst Softwares = () => {\n    const myMap = []\n\n    for(const object in SoftwareSDK) {\n        //console.log(SoftwareSDK[object])\n        for(const value in SoftwareSDK[object]){\n            console.log(SoftwareSDK[object][value])\n            if(value === 'name'){\n                var SoftwareName = SoftwareSDK[object][value]\n            }\n            else{\n                var Status = SoftwareSDK[object][value]\n            }\n        }\n        if ( Status === 0){\n            myMap.push(<li key={SoftwareName}>\n                    <h2 className=\"soft\">{SoftwareName}\n                        <DoNotDisturb className=\"StatusIcon\">\n                        </DoNotDisturb>\n                    </h2>\n                </li>\n                )\n        }\n        else{\n            myMap.push(<li key={SoftwareName}>\n                    <h2 className=\"soft\">{SoftwareName}\n                        <CheckCircle className=\"StatusIcon\">\n                        </CheckCircle>\n                    </h2>\n                </li>\n                )\n        }\n    }\n    return myMap\n}\nconst Hard = () => {\n    const myMap = []\n\n    for(const object in HardwareSDK) {\n        //console.log(SoftwareSDK[object])\n\n        for(const value in HardwareSDK[object]){\n\n            if(value === 'name'){\n                var HardwareName = HardwareSDK[object][value]\n            }\n            else{\n                var Status = HardwareSDK[object][value]\n            }\n        }\n        if ( Status === 0){\n            myMap.push(<li key={HardwareName}>\n                    <h2 className=\"soft\">{HardwareName}\n                        <DoNotDisturb className=\"StatusIcon\">\n                        </DoNotDisturb>\n                    </h2>\n                </li>\n                )\n        }\n        else{\n            myMap.push(<li key={HardwareName}>\n                    <h2 className=\"soft\">{HardwareName}\n                        <CheckCircle className=\"StatusIcon\">\n                        </CheckCircle>\n                    </h2>\n                </li>\n                )\n        }\n    }\n    console.log(myMap)\n    return myMap\n}\nconst SoftwareList = () => (\n    <ul className=\"SoftwareListCSS\">\n        <Softwares/>\n    </ul>\n);\nconst HardwareList = () => (\n    <ul className=\"SoftwareListCSS\">\n        <Hard/>\n    </ul>\n);\n\n\n  return (\n    <div className=\"testing\">\n       <>\n            <h2 className=\"Application\">Project Figure what to put on the bottom of my hayride jug</h2>\n\t\t\t<div className=\"TestResults\">\n\t\t\t    <div className=\"Software\">\n                    <h2 className=\"soft\">Software\n                    </h2>\n                    <SoftwareList/>\n                </div>\n                <div className=\"Hardware\">\n                    <h2 className=\"soft\">Hardware\n                    </h2>\n                    <HardwareList/>\n                </div>\n            </div>\n\t    </>\n\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}