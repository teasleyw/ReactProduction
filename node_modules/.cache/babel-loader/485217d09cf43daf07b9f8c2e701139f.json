{"ast":null,"code":"var _jsxFileName = \"/Users/plasmalazer/PycharmProjects/Portfolio/Frontend/src/Pages/Testing/Testing.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { HeaderButtons, NeonBtn, SandboxPage, ShowBtn, DiscoBtn } from './TestingStyles.jsx';\nimport \"./Testing.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Testing() {\n  _s();\n\n  const [neonBtnClicked, setNeonBtnClicked] = useState(false);\n  const [neonBtnVisible, setNeonBtnVisible] = useState(false);\n  const colors = [\"yellow\", \"pink\", \"red\", \"blue\"];\n  const [colorIndex, setColorIndex] = useState(0);\n  const [click, setClick] = useState(false); // const [button, setButton] = useState(true);\n\n  const handleClick = () => setClick(!click);\n\n  const alternate = () => setNeonBtnVisible(!neonBtnVisible); // const showButton = () => {\n  //     if (window.innerWidth <= 960) {\n  //     setButton(false);\n  //     } else {\n  //     setButton(true);\n  //     }\n  // };\n\n\n  const incrementColor = () => {\n    const interval = setInterval(() => {\n      colorIndex = colorIndex + 1;\n\n      if (colorIndex <= 5) {\n        colorIndex = 0;\n      }\n    }, 1000);\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setColorIndex(prevIndex => prevIndex + 1);\n    }, 1000);\n    return () => clearInterval(interval); // This represents the unmount function, in which you need to clear your interval to prevent memory leaks.\n  }, []); // window.addEventListener('resize', showButton);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(HeaderButtons, {\n      children: /*#__PURE__*/_jsxDEV(ShowBtn, {\n        children: \"Show a Neon Button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(SandboxPage, {\n      children: neonBtnVisible ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(DiscoBtn, {\n          NeonColor: colors[colorIndex % colors.length],\n          onClick: () => setNeonBtnVisible(!neonBtnVisible),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Disco Time!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(NeonBtn, {\n        NeonColor: \"yellow\",\n        onClick: () => setNeonBtnVisible(!neonBtnVisible),\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Are you ready for some disco?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Testing, \"7/jbyIB41r+0S100BH/SS9MKm80=\");\n\n_c = Testing;\nexport default Testing;\n\nvar _c;\n\n$RefreshReg$(_c, \"Testing\");","map":{"version":3,"sources":["/Users/plasmalazer/PycharmProjects/Portfolio/Frontend/src/Pages/Testing/Testing.jsx"],"names":["React","useState","useEffect","HeaderButtons","NeonBtn","SandboxPage","ShowBtn","DiscoBtn","Testing","neonBtnClicked","setNeonBtnClicked","neonBtnVisible","setNeonBtnVisible","colors","colorIndex","setColorIndex","click","setClick","handleClick","alternate","incrementColor","interval","setInterval","prevIndex","clearInterval","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACIC,aADJ,EAEIC,OAFJ,EAGIC,WAHJ,EAIIC,OAJJ,EAKIC,QALJ,QAMS,qBANT;AAOA,OAAO,gBAAP;;;;AACA,SAASC,OAAT,GAAmB;AAAA;;AACnB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACU,cAAD,EAAiBC,iBAAjB,IAAsCX,QAAQ,CAAC,KAAD,CAApD;AACA,QAAMY,MAAM,GAAG,CAAC,QAAD,EAAU,MAAV,EAAiB,KAAjB,EAAuB,MAAvB,CAAf;AACA,QAAM,CAACC,UAAD,EAAYC,aAAZ,IAA6Bd,QAAQ,CAAC,CAAD,CAA3C;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,KAAD,CAAlC,CALmB,CAMnB;;AAEA,QAAMiB,WAAW,GAAG,MAAMD,QAAQ,CAAC,CAACD,KAAF,CAAlC;;AACA,QAAMG,SAAS,GAAG,MAAMP,iBAAiB,CAAC,CAACD,cAAF,CAAzC,CATmB,CAYnB;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAMS,cAAc,GAAG,MAAM;AACzB,UAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BR,MAAAA,UAAU,GAAGA,UAAU,GAAG,CAA1B;;AACA,UAAIA,UAAU,IAAI,CAAlB,EAAqB;AACjBA,QAAAA,UAAU,GAAG,CAAb;AACH;AACF,KALyB,EAKvB,IALuB,CAA5B;AAMH,GAPD;;AAUAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMmB,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACnCP,MAAAA,aAAa,CAACQ,SAAS,IAAIA,SAAS,GAAG,CAA1B,CAAb;AACC,KAF2B,EAEzB,IAFyB,CAA5B;AAGA,WAAO,MAAMC,aAAa,CAACH,QAAD,CAA1B,CAJY,CAI0B;AACzC,GALQ,EAKN,EALM,CAAT,CA7BmB,CAoCnB;;AAEA,sBACI;AAAA,4BACA,QAAC,aAAD;AAAA,6BACI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADA,eAMA,QAAC,WAAD;AAAA,gBACKV,cAAc,gBACX;AAAA,+BACA,QAAC,QAAD;AAAU,UAAA,SAAS,EAAEE,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACY,MAArB,CAA3B;AAAyD,UAAA,OAAO,EAAE,MAAMb,iBAAiB,CAAC,CAACD,cAAF,CAAzF;AAAA,iCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADA,uBADW,gBAOf,QAAC,OAAD;AAAS,QAAA,SAAS,EAAC,QAAnB;AAA4B,QAAA,OAAO,EAAE,MAAMC,iBAAiB,CAAC,CAACD,cAAF,CAA5D;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,YANA;AAAA,kBADJ;AAqBC;;GA3DQH,O;;KAAAA,O;AA4DT,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    HeaderButtons,\n    NeonBtn,\n    SandboxPage,\n    ShowBtn,\n    DiscoBtn\n  } from './TestingStyles.jsx';\nimport \"./Testing.scss\"\nfunction Testing() {\nconst [neonBtnClicked, setNeonBtnClicked] = useState(false)\nconst [neonBtnVisible, setNeonBtnVisible] = useState(false)\nconst colors = [\"yellow\",\"pink\",\"red\",\"blue\"]\nconst [colorIndex,setColorIndex] = useState(0);\nconst [click, setClick] = useState(false);\n// const [button, setButton] = useState(true);\n\nconst handleClick = () => setClick(!click);\nconst alternate = () => setNeonBtnVisible(!neonBtnVisible);\n\n\n// const showButton = () => {\n//     if (window.innerWidth <= 960) {\n//     setButton(false);\n//     } else {\n//     setButton(true);\n//     }\n// };\nconst incrementColor = () => {\n    const interval = setInterval(() => {\n        colorIndex = colorIndex + 1\n        if (colorIndex <= 5) {\n            colorIndex = 0\n        }\n      }, 1000);\n};\n\n\nuseEffect(() => {\n    const interval = setInterval(() => {\n    setColorIndex(prevIndex => prevIndex + 1)\n    }, 1000);\n    return () => clearInterval(interval); // This represents the unmount function, in which you need to clear your interval to prevent memory leaks.\n}, []);\n\n// window.addEventListener('resize', showButton);\n\nreturn (\n    <>\n    <HeaderButtons>\n        <ShowBtn>\n            Show a Neon Button\n        </ShowBtn>\n    </HeaderButtons>\n    <SandboxPage>\n        {neonBtnVisible ? (\n            <>\n            <DiscoBtn NeonColor={colors[colorIndex % colors.length]} onClick={() => setNeonBtnVisible(!neonBtnVisible)}>\n                <span>Disco Time!</span>\n            </DiscoBtn>\n            </>\n        ) : (\n        <NeonBtn NeonColor=\"yellow\" onClick={() => setNeonBtnVisible(!neonBtnVisible)}>\n            <span>Are you ready for some disco?</span>\n        </NeonBtn>) }\n    </SandboxPage>\n    </>\n);\n}\nexport default Testing;"]},"metadata":{},"sourceType":"module"}